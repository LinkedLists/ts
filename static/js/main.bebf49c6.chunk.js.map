{"version":3,"sources":["util/r&mAPI.js","components/searchBar.jsx","components/characterCard.jsx","components/main.jsx","App.js","reportWebVitals.js","index.js"],"names":["data","apiURL","allData","fetchRequest","fetchData","a","fetch","res","json","push","results","info","next","SearchBar","props","setSearchInput","className","placeholder","onChange","e","target","value","toLowerCase","trim","CharacterCard","card","src","image","alt","name","origin","species","location","style","status","background","color","Main","useState","state","setState","searchInput","useEffect","RickandMortyAPI","then","characters","length","filter","character","includes","sortBySearch","map","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wLAEIA,E,+FAFAC,EAAS,oDAGTC,EAAU,GAERC,EAAe,CACjBC,UAAU,WAAD,4BAAE,4BAAAC,EAAA,sEACWC,MAAML,GADjB,cACDM,EADC,gBAEMA,EAAIC,OAFV,UAEPR,EAFO,OAGPE,EAAQO,KAAR,MAAAP,EAAO,YAASF,EAAKU,UACE,OAAnBV,EAAKW,KAAKC,KAJP,wBAKHX,EAASD,EAAKW,KAAKC,KALhB,UAMUT,EAAaC,YANvB,0EAQIF,GARJ,4CAAF,kDAAC,IAcCC,I,OCFAU,MAhBf,SAAmBC,GAEjB,IAAOC,EAAkBD,EAAlBC,eAEP,OACE,uBACEC,UAAU,aACVC,YAAY,2BACZC,SAAW,SAAAC,GAAC,OAAIJ,EAAeI,EAAEC,OAAOC,MAAMC,cAAcC,YCwDnDC,MAhEf,SAAuBV,GAErB,IAAOW,EAAQX,EAARW,KAqBP,OACE,sBAAKT,UAAU,iBAAf,UAEE,qBAAKA,UAAU,cAAaU,IAAKD,EAAKE,MAAOC,IAAI,QACjD,oBAAIZ,UAAU,iBAAd,SAAgCS,EAAKI,OAErC,sBAAKb,UAAU,iBAAf,UACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,SAAf,sBAAkCS,EAAKK,OAAOD,QAC9C,qBAAKb,UAAU,UAAf,SAA0BS,EAAKM,UAC/B,sBAAKf,UAAU,OAAf,wBAAkCS,EAAKO,SAASH,WAElD,qBAAKb,UAAU,QAAf,SACE,qBAAKA,UAAU,SAASiB,MA/BV,UAAhBR,EAAKS,OACA,CACLC,WAAY,QACZC,MAAO,SAGc,SAAhBX,EAAKS,OACL,CACLC,WAAY,OAGP,CACLA,WAAY,OACZC,MAAO,SAkBL,SAAkDX,EAAKS,kBCiBlDG,MAlDf,WAEE,MAA0BC,mBAAS,MAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoB1B,EAApB,KAqCA,OAnCA2B,qBAAW,WACTC,EAAgBvC,YAAYwC,MAAK,SAAArC,GAC/BiC,EAASjC,QAGV,IA+BD,sBAAKS,UAAU,iBAAf,UACE,cAAC,EAAD,CAAWD,eAAgBA,IAC3B,qBAAKC,UAAU,sBAAf,SAfEuB,EAhBN,WACE,IACIM,EAAU,YAAON,GASrB,OAPIE,EAAYK,OAAS,IACvBD,EAAaA,EAAWE,QAAQ,SAAAC,GAE9B,OADOA,EAAUnB,KAAKP,cACV2B,SAASR,OAIlBI,EAQOK,GACCC,KAAK,SAAA1B,GAChB,OAAO,cAAC,EAAD,CAAeA,KAAMA,OAGvB,WC7BE2B,MARf,WACE,OACE,qBAAKpC,UAAU,MAAf,SACE,cAAC,EAAD,OCKSqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.bebf49c6.chunk.js","sourcesContent":["let apiURL = \"https://rickandmortyapi.com/api/character/?page=1\";\n\nlet data\nlet allData = []\n\nconst fetchRequest = {\n    fetchData: async () => {\n        const res = await fetch(apiURL);\n        data = await res.json();\n        allData.push(...data.results)\n        if (data.info.next !== null) {\n            apiURL = data.info.next\n            return await fetchRequest.fetchData()\n        } else {\n            return allData;\n        }\n    },\n};\n\n\nexport default fetchRequest","import PropTypes from 'prop-types';\n\nfunction SearchBar(props) {\n\n  const {setSearchInput} = props\n\n  return (\n    <input \n      className=\"search-bar\" \n      placeholder=\"Search by character name\" \n      onChange={ e => setSearchInput(e.target.value.toLowerCase().trim()) }/>\n  )\n}\n\nSearchBar.propTypes = {\n  setSearchInput: PropTypes.func.isRequired\n}\n\nexport default SearchBar","import PropTypes from 'prop-types';\n\nfunction CharacterCard(props) {\n\n  const {card} = props\n\n  function setStatusColor() {\n    if (card.status === 'Alive') {\n      return {\n        background: 'green',\n        color: 'white'\n      }\n    }\n    else if (card.status === 'Dead') {\n      return {\n        background: 'red'\n      }\n    } else {\n      return {\n        background: 'grey',\n        color: 'white'\n      }\n    }\n  }\n\n  return (\n    <div className=\"card-container\">\n      {/* {console.log(card)} */}\n      <img className=\"card-avatar\"src={card.image} alt=\"img\" />\n      <h3 className=\"character-name\">{card.name}</h3>\n\n      <div className=\"character-info\">\n        <div className=\"left-info\">\n          <div className=\"origin\">Origin - {card.origin.name}</div>\n          <div className=\"species\">{card.species}</div>\n          <div className=\"loca\">Location - {card.location.name}</div>\n        </div>\n        <div className=\"right\">\n          <div className=\"status\" style={setStatusColor()}>{card.status}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// *********************************\n// CARD FORMAT\n// created: \"2017-11-04T20:06:54.976Z\"\n// episode: ['https://rickandmortyapi.com/api/episode/24']\n// gender: \"Male\"\n// id: 9\n// image: \"https://rickandmortyapi.com/api/character/avatar/9.jpeg\"\n// location: {name: 'Earth (Replacement Dimension)', url: 'https://rickandmortyapi.com/api/location/20'}\n// name: \"Agency Director\"\n// origin: {name: 'Earth (Replacement Dimension)', url: 'https://rickandmortyapi.com/api/location/20'}\n// species: \"Human\"\n// status: \"Dead\"\n// type: \"\"\n// url: \"https://rickandmortyapi.com/api/character/9\"\n// *********************************\n\n\nCharacterCard.propTypes = {\n  card: PropTypes.object.isRequired\n}\n\nexport default CharacterCard","import React, {useState, useEffect} from 'react';\nimport RickandMortyAPI from '../util/r&mAPI'\nimport SearchBar from './searchBar'\nimport CharacterCard from './characterCard';\n\nfunction Main() {\n\n  const [state, setState] = useState(null)\n  const [searchInput, setSearchInput] = useState(\"\")\n\n  useEffect( () => {\n    RickandMortyAPI.fetchData().then(res => {\n      setState(res)\n      // console.log(res)\n    })\n  }, [])\n\n  function sortBySearch() {\n    let name = \"\"\n    let characters = [...state]\n    // console.log(state)\n    if (searchInput.length > 0) {\n      characters = characters.filter( character => {\n        name = character.name.toLowerCase()\n        return name.includes(searchInput)\n      })\n    }\n\n    return characters\n  }\n\n  function renderCards() {\n    // console.log(state)\n    if (state) {\n    // if (state && state.results.length) {\n      // let cards = state.results\n      let cards = sortBySearch()\n      return cards.map( card => {\n        return <CharacterCard card={card} />\n      })\n    } else {\n      return null\n    }\n  }\n\n  return(\n    <div className=\"main-container\">\n      <SearchBar setSearchInput={setSearchInput} />\n      <div className=\"card-list-container\">\n        {renderCards()}\n      </div>\n    </div>\n  )\n}\n\nexport default Main","// import logo from './logo.svg';\nimport './App.css';\nimport Main from './components/main'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './stylesheets/characterCard.css'\nimport './stylesheets/searchBar.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}